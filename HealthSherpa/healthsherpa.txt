# # # # # # 1. Write a function that flattens an arbitrarily nested array. Assume the array contains either numbers or further nested arrays. For example: flatten([1, [2, [3, 4]]]) -> [1, 2, 3, 4]
# # # # # Ruby 
# Don't use a built-in flattener
# 
#2 - #5 Please do in SQL, do not use Active Record 
#
# # # # # # 2. Suppose we are building a simple social network. There are users, and users can be friends with other users. Design a schema for this setup. What row or rows would you store in the Friendships table if User 1 is friends with User 2?
# # # # # # 
# # # 
# # # # # # 3. Suppose we want to support statuses - i.e. users can post statuses, and all the friends of a user can view that user's statuses. How would you add to your schema to support this?
# # # # # # 
# # # 
# # # # # # 4. What would the query look like to fetch a user's timeline - i.e. the posts their friends have made, with most recent posts coming first?
# # # # # # 
# # # 
# # # # # # 5. Suppose we want to support friend requests. I.e. to be friends with someone (and view their statuses), you must first request permission, and they must approve you. How would you modify your schema and the query to support this?
# # # # # #  */

# 1

def xyz(x)
  a = x.join(',')
  b = a.split(',')
  c = b.map(&:to_i)
  return c
end

print(xyz([1, [2, [3, 4]]]))

# 2

create_table "users"
  t.index "user_id"
  t.string "user"
end

create_table "friendships"
  t.string "user_id"
  t.string "friend_ids" - but made up of user ids from the users table
end

users table would have a list with their own id and the friendships would be in the friendships table.  So user 1, John Smith, and user 2, Jane Smith, and user 3, Jane Doe, would be listed in the users table. The friendships table would just list the ids of users that have friends on column and then the user ids of their friends in the second column.  So it would look like:

users:
1  John Smith
2  Jane Smith
3  Jane Doe

friendships:
1  2
1  3
3  1

Would use this sql statement:

select * from users as u, friendships as f where u.user_id = f.user_id and f.user_id = "1"
  
# 3

Would modify the friendships table to include maybe a "privacy" status column to put in a flag to see if the relationship is viewable for posts:

create_table "friendships"
  t.string "user_id"
  t.string "friend_ids" - but made up of user ids from the users table
  t.boolean "privacy"
end
  
friendships:
1  2  true
1  3  false
3  1  true

Would create a second table for statuses in case you want to keep a history of a person statuses over time:
  
create_table "statuses"
  t.string "user_id"
  t.string "status"
  t.datetime "created_at"
end

The sql would probably looks like this:

select status from friendships as f, statuses as s where f.user_id = s.user_id and s.user_id = 1 and f.privacy = true

# 4
  
Taking the same tables from above the sql would probably look like this for a user to view their friend's posts:
  
select status from friendships as f, statuses as s where f.friends_ids = s.user_id and f.user_id = 1 and s.user_id = 2 and f.privacy = true order by created_at desc
  
# 5

Would modify the friendships table and add a "permission" table:
    
create_table "friendships"
  t.string "user_id"
  t.string "friend_ids" - but made up of user ids from the users table
  t.boolean "privacy"
  t.boolean "permission"
end

friendships:
1  2  true  true
1  3  false  false
3  1  true  true

For a friend to view a person's posts then the sql would probably looks like this:

select status from status as s, friendships as f where s.user_id = f.user_id s.user_id = 1 and f.friends_ids = 2 and f.privacy = true and f.permission = true